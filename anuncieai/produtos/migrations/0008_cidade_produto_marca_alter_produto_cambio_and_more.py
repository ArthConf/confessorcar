# Generated by Django 5.2 on 2025-07-06 07:22

import django.db.models.deletion
from django.db import migrations, models

def forward_populate_cities(apps, schema_editor):
    """
    Cria registros de Cidade para cada cidade única encontrada nos produtos existentes
    e atualiza os produtos para apontar para essas cidades.
    """
    Produto = apps.get_model('produtos', 'Produto')
    Cidade = apps.get_model('produtos', 'Cidade')
    
    # Primeiro, coletamos todas as combinações cidade/estado únicas
    cidade_estado_map = {}
    for produto in Produto.objects.all():
        if produto.cidade and produto.estado:
            cidade_estado_map[(produto.cidade, produto.estado)] = True
    
    # Depois, criamos os objetos Cidade
    cidade_obj_map = {}
    for cidade_nome, estado in cidade_estado_map:
        cidade = Cidade.objects.create(nome=cidade_nome, estado=estado)
        cidade_obj_map[(cidade_nome, estado)] = cidade.id
    
    # Finalmente, atualizamos os produtos
    for produto in Produto.objects.all():
        if produto.cidade and produto.estado:
            key = (produto.cidade, produto.estado)
            if key in cidade_obj_map:
                produto.cidade_id = cidade_obj_map[key]
                produto.save(update_fields=['cidade_id'])
            else:
                # Se não há correspondência, definimos como NULL
                produto.cidade_id = None
                produto.save(update_fields=['cidade_id'])
        else:
            produto.cidade_id = None
            produto.save(update_fields=['cidade_id'])

def reverse_func(apps, schema_editor):
    """
    Reverte o processo movendo os nomes das cidades de volta para o campo cidade de Produto
    """
    Produto = apps.get_model('produtos', 'Produto')
    Cidade = apps.get_model('produtos', 'Cidade')
    
    for produto in Produto.objects.all():
        if produto.cidade_id:
            try:
                cidade = Cidade.objects.get(pk=produto.cidade_id)
                produto.cidade = cidade.nome
                produto.save(update_fields=['cidade'])
            except Cidade.DoesNotExist:
                pass


class Migration(migrations.Migration):

    dependencies = [
        ('produtos', '0007_produto_cidade_produto_cilindrada_produto_estado_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('estado', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2)),
            ],
            options={
                'verbose_name': 'Cidade',
                'verbose_name_plural': 'Cidades',
                'ordering': ['estado', 'nome'],
            },
        ),
        migrations.AddField(
            model_name='produto',
            name='marca',
            field=models.CharField(blank=True, choices=[('chevrolet', 'Chevrolet'), ('fiat', 'Fiat'), ('ford', 'Ford'), ('volkswagen', 'Volkswagen'), ('renault', 'Renault'), ('toyota', 'Toyota'), ('hyundai', 'Hyundai'), ('honda', 'Honda'), ('nissan', 'Nissan'), ('citroen', 'Citroën'), ('peugeot', 'Peugeot'), ('mitsubishi', 'Mitsubishi'), ('audi', 'Audi'), ('bmw', 'BMW'), ('mercedes', 'Mercedes-Benz'), ('land_rover', 'Land Rover'), ('volvo', 'Volvo'), ('lexus', 'Lexus'), ('porsche', 'Porsche'), ('jaguar', 'Jaguar'), ('maserati', 'Maserati'), ('ferrari', 'Ferrari'), ('lamborghini', 'Lamborghini'), ('bentley', 'Bentley'), ('rolls_royce', 'Rolls-Royce'), ('aston_martin', 'Aston Martin'), ('kia', 'Kia'), ('subaru', 'Subaru'), ('suzuki', 'Suzuki'), ('mazda', 'Mazda'), ('jac', 'JAC'), ('chery', 'Chery'), ('lifan', 'Lifan'), ('byd', 'BYD'), ('geely', 'Geely'), ('great_wall', 'Great Wall'), ('haval', 'Haval'), ('saic', 'SAIC'), ('dongfeng', 'Dongfeng'), ('ssangyong', 'SsangYong'), ('tata', 'Tata'), ('mahindra', 'Mahindra'), ('isuzu', 'Isuzu'), ('daihatsu', 'Daihatsu'), ('jeep', 'Jeep'), ('chrysler', 'Chrysler'), ('dodge', 'Dodge'), ('cadillac', 'Cadillac'), ('gmc', 'GMC'), ('lincoln', 'Lincoln'), ('tesla', 'Tesla'), ('ram', 'RAM'), ('buick', 'Buick'), ('alfa_romeo', 'Alfa Romeo'), ('seat', 'Seat'), ('skoda', 'Skoda'), ('mini', 'Mini'), ('smart', 'Smart'), ('ds', 'DS'), ('opel', 'Opel'), ('fiat_professional', 'Fiat Professional'), ('dacia', 'Dacia'), ('lada', 'Lada'), ('troller', 'Troller'), ('agrale', 'Agrale'), ('marcopolo', 'Marcopolo'), ('gurgel', 'Gurgel'), ('puma', 'Puma'), ('scania', 'Scania'), ('volvo_trucks', 'Volvo Trucks'), ('mercedes_benz_trucks', 'Mercedes-Benz Trucks'), ('iveco', 'Iveco'), ('daf', 'DAF'), ('man', 'MAN'), ('volkswagen_trucks', 'Volkswagen Trucks'), ('hino', 'Hino'), ('caoa', 'CAOA'), ('outros', 'Outros')], max_length=100, verbose_name='Marca'),
        ),
        migrations.AlterField(
            model_name='produto',
            name='cambio',
            field=models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatico', 'Automático'), ('cvt', 'CVT'), ('automatizado', 'Automatizado'), ('semi_automatico', 'Semi-Automático'), ('dupla_embreagem', 'Dupla Embreagem')], max_length=20, verbose_name='Câmbio'),
        ),
        migrations.AlterField(
            model_name='produto',
            name='carroceria',
            field=models.CharField(blank=True, choices=[('hatchback', 'Hatchback'), ('sedan', 'Sedan'), ('suv', 'SUV'), ('crossover', 'Crossover'), ('pickup', 'Pickup'), ('minivan', 'Minivan'), ('van', 'Van'), ('perua', 'Perua/SW'), ('coupe', 'Coupé'), ('conversivel', 'Conversível'), ('jipe', 'Jipe'), ('buggy', 'Buggy'), ('esportivo', 'Esportivo'), ('utilitario', 'Utilitário'), ('caminhao', 'Caminhão'), ('outro', 'Outro')], max_length=20, verbose_name='Carroceria'),
        ),
        migrations.AlterField(
            model_name='produto',
            name='combustivel',
            field=models.CharField(blank=True, choices=[('flex', 'Flex'), ('gasolina', 'Gasolina'), ('diesel', 'Diesel'), ('eletrico', 'Elétrico'), ('hibrido', 'Híbrido'), ('hibrido_plug_in', 'Híbrido Plug-in'), ('etanol', 'Etanol'), ('gnv', 'GNV'), ('outro', 'Outro')], max_length=20, verbose_name='Combustível'),
        ),
        migrations.AlterField(
            model_name='produto',
            name='cor',
            field=models.CharField(blank=True, choices=[('preto', 'Preto'), ('branco', 'Branco'), ('prata', 'Prata'), ('cinza', 'Cinza'), ('vermelho', 'Vermelho'), ('azul', 'Azul'), ('azul_marinho', 'Azul Marinho'), ('azul_claro', 'Azul Claro'), ('verde', 'Verde'), ('verde_escuro', 'Verde Escuro'), ('verde_militar', 'Verde Militar'), ('amarelo', 'Amarelo'), ('laranja', 'Laranja'), ('marrom', 'Marrom'), ('bege', 'Bege'), ('dourado', 'Dourado'), ('grafite', 'Grafite'), ('vinho', 'Vinho'), ('bordô', 'Bordô'), ('bronze', 'Bronze'), ('chumbo', 'Chumbo'), ('champagne', 'Champagne'), ('rosa', 'Rosa'), ('roxo', 'Roxo'), ('violeta', 'Violeta'), ('cinza_escuro', 'Cinza Escuro'), ('cinza_claro', 'Cinza Claro'), ('marfim', 'Marfim'), ('titanium', 'Titanium'), ('prata_fosco', 'Prata Fosco'), ('preto_fosco', 'Preto Fosco')], max_length=50, verbose_name='Cor'),
        ),
        # Primeiro renomeamos o campo cidade para cidade_nome temporariamente
        migrations.RenameField(
            model_name='produto',
            old_name='cidade',
            new_name='cidade_nome_temp',
        ),
        # Adicionamos o novo campo ForeignKey com NULL
        migrations.AddField(
            model_name='produto',
            name='cidade',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='produtos.cidade', verbose_name='Cidade'),
        ),
        # Migramos os dados
        migrations.RunPython(forward_populate_cities, reverse_func),
        # Removemos o campo temporário
        migrations.RemoveField(
            model_name='produto',
            name='cidade_nome_temp',
        ),
    ]
    